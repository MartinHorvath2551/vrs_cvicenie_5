
vrs_cv5_II_programming.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001108  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001290  08001290  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001290  08001290  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001290  08001290  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001290  08001290  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001290  08001290  00011290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001294  08001294  00011294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800129c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800129c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000031ed  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d3f  00000000  00000000  00023221  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003f8  00000000  00000000  00023f60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000380  00000000  00000000  00024358  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014348  00000000  00000000  000246d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002d2d  00000000  00000000  00038a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d94c  00000000  00000000  0003b74d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a9099  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f24  00000000  00000000  000a9114  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001278 	.word	0x08001278

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001278 	.word	0x08001278

080001c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__NVIC_GetPriorityGrouping+0x18>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	0a1b      	lsrs	r3, r3, #8
 80001d2:	f003 0307 	and.w	r3, r3, #7
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	db0b      	blt.n	800020e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	f003 021f 	and.w	r2, r3, #31
 80001fc:	4907      	ldr	r1, [pc, #28]	; (800021c <__NVIC_EnableIRQ+0x38>)
 80001fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000202:	095b      	lsrs	r3, r3, #5
 8000204:	2001      	movs	r0, #1
 8000206:	fa00 f202 	lsl.w	r2, r0, r2
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e000e100 	.word	0xe000e100

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000230:	2b00      	cmp	r3, #0
 8000232:	db0a      	blt.n	800024a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	b2da      	uxtb	r2, r3
 8000238:	490c      	ldr	r1, [pc, #48]	; (800026c <__NVIC_SetPriority+0x4c>)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	0112      	lsls	r2, r2, #4
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	440b      	add	r3, r1
 8000244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000248:	e00a      	b.n	8000260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4908      	ldr	r1, [pc, #32]	; (8000270 <__NVIC_SetPriority+0x50>)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	f003 030f 	and.w	r3, r3, #15
 8000256:	3b04      	subs	r3, #4
 8000258:	0112      	lsls	r2, r2, #4
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	440b      	add	r3, r1
 800025e:	761a      	strb	r2, [r3, #24]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	e000e100 	.word	0xe000e100
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000274:	b480      	push	{r7}
 8000276:	b089      	sub	sp, #36	; 0x24
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f003 0307 	and.w	r3, r3, #7
 8000286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	f1c3 0307 	rsb	r3, r3, #7
 800028e:	2b04      	cmp	r3, #4
 8000290:	bf28      	it	cs
 8000292:	2304      	movcs	r3, #4
 8000294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	3304      	adds	r3, #4
 800029a:	2b06      	cmp	r3, #6
 800029c:	d902      	bls.n	80002a4 <NVIC_EncodePriority+0x30>
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	3b03      	subs	r3, #3
 80002a2:	e000      	b.n	80002a6 <NVIC_EncodePriority+0x32>
 80002a4:	2300      	movs	r3, #0
 80002a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a8:	f04f 32ff 	mov.w	r2, #4294967295
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	43da      	mvns	r2, r3
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	401a      	ands	r2, r3
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002bc:	f04f 31ff 	mov.w	r1, #4294967295
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43d9      	mvns	r1, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002cc:	4313      	orrs	r3, r2
         );
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3724      	adds	r7, #36	; 0x24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
	...

080002dc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002e6:	695a      	ldr	r2, [r3, #20]
 80002e8:	4907      	ldr	r1, [pc, #28]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002f2:	695a      	ldr	r2, [r3, #20]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4013      	ands	r3, r2
 80002f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002fa:	68fb      	ldr	r3, [r7, #12]
}
 80002fc:	bf00      	nop
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40021000 	.word	0x40021000

0800030c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000316:	4a13      	ldr	r2, [pc, #76]	; (8000364 <LL_SYSCFG_SetEXTISource+0x58>)
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	3302      	adds	r3, #2
 800031e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	0c1b      	lsrs	r3, r3, #16
 8000326:	43db      	mvns	r3, r3
 8000328:	ea02 0103 	and.w	r1, r2, r3
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	fa93 f3a3 	rbit	r3, r3
 8000338:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	fab3 f383 	clz	r3, r3
 8000340:	b2db      	uxtb	r3, r3
 8000342:	461a      	mov	r2, r3
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	fa03 f202 	lsl.w	r2, r3, r2
 800034a:	4806      	ldr	r0, [pc, #24]	; (8000364 <LL_SYSCFG_SetEXTISource+0x58>)
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	430a      	orrs	r2, r1
 8000352:	3302      	adds	r3, #2
 8000354:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000358:	bf00      	nop
 800035a:	3714      	adds	r7, #20
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr
 8000364:	40010000 	.word	0x40010000

08000368 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000368:	b480      	push	{r7}
 800036a:	b089      	sub	sp, #36	; 0x24
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	681a      	ldr	r2, [r3, #0]
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	fa93 f3a3 	rbit	r3, r3
 8000382:	613b      	str	r3, [r7, #16]
  return result;
 8000384:	693b      	ldr	r3, [r7, #16]
 8000386:	fab3 f383 	clz	r3, r3
 800038a:	b2db      	uxtb	r3, r3
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	2103      	movs	r1, #3
 8000390:	fa01 f303 	lsl.w	r3, r1, r3
 8000394:	43db      	mvns	r3, r3
 8000396:	401a      	ands	r2, r3
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800039c:	69fb      	ldr	r3, [r7, #28]
 800039e:	fa93 f3a3 	rbit	r3, r3
 80003a2:	61bb      	str	r3, [r7, #24]
  return result;
 80003a4:	69bb      	ldr	r3, [r7, #24]
 80003a6:	fab3 f383 	clz	r3, r3
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	6879      	ldr	r1, [r7, #4]
 80003b0:	fa01 f303 	lsl.w	r3, r1, r3
 80003b4:	431a      	orrs	r2, r3
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	601a      	str	r2, [r3, #0]
}
 80003ba:	bf00      	nop
 80003bc:	3724      	adds	r7, #36	; 0x24
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr

080003c6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80003c6:	b480      	push	{r7}
 80003c8:	b089      	sub	sp, #36	; 0x24
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	60f8      	str	r0, [r7, #12]
 80003ce:	60b9      	str	r1, [r7, #8]
 80003d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	68da      	ldr	r2, [r3, #12]
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	fa93 f3a3 	rbit	r3, r3
 80003e0:	613b      	str	r3, [r7, #16]
  return result;
 80003e2:	693b      	ldr	r3, [r7, #16]
 80003e4:	fab3 f383 	clz	r3, r3
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	2103      	movs	r1, #3
 80003ee:	fa01 f303 	lsl.w	r3, r1, r3
 80003f2:	43db      	mvns	r3, r3
 80003f4:	401a      	ands	r2, r3
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003fa:	69fb      	ldr	r3, [r7, #28]
 80003fc:	fa93 f3a3 	rbit	r3, r3
 8000400:	61bb      	str	r3, [r7, #24]
  return result;
 8000402:	69bb      	ldr	r3, [r7, #24]
 8000404:	fab3 f383 	clz	r3, r3
 8000408:	b2db      	uxtb	r3, r3
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	6879      	ldr	r1, [r7, #4]
 800040e:	fa01 f303 	lsl.w	r3, r1, r3
 8000412:	431a      	orrs	r2, r3
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	60da      	str	r2, [r3, #12]
}
 8000418:	bf00      	nop
 800041a:	3724      	adds	r7, #36	; 0x24
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	683a      	ldr	r2, [r7, #0]
 8000432:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr

08000440 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b08a      	sub	sp, #40	; 0x28
 8000444:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000446:	f107 031c 	add.w	r3, r7, #28
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
 800045e:	611a      	str	r2, [r3, #16]
 8000460:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000462:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000466:	f7ff ff39 	bl	80002dc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800046a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800046e:	f7ff ff35 	bl	80002dc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 8000472:	2108      	movs	r1, #8
 8000474:	4824      	ldr	r0, [pc, #144]	; (8000508 <MX_GPIO_Init+0xc8>)
 8000476:	f7ff ffd5 	bl	8000424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE3);
 800047a:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 800047e:	2000      	movs	r0, #0
 8000480:	f7ff ff44 	bl	800030c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(BUTTON_GPIO_Port, BUTTON_Pin, LL_GPIO_PULL_NO);
 8000484:	2200      	movs	r2, #0
 8000486:	2108      	movs	r1, #8
 8000488:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048c:	f7ff ff9b 	bl	80003c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BUTTON_GPIO_Port, BUTTON_Pin, LL_GPIO_MODE_INPUT);
 8000490:	2200      	movs	r2, #0
 8000492:	2108      	movs	r1, #8
 8000494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000498:	f7ff ff66 	bl	8000368 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 800049c:	2308      	movs	r3, #8
 800049e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80004a0:	2300      	movs	r3, #0
 80004a2:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80004a4:	2301      	movs	r3, #1
 80004a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80004aa:	2300      	movs	r3, #0
 80004ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80004b0:	2301      	movs	r3, #1
 80004b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80004b6:	f107 031c 	add.w	r3, r7, #28
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 fc22 	bl	8000d04 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 80004c0:	2308      	movs	r3, #8
 80004c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004c4:	2301      	movs	r3, #1
 80004c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004c8:	2300      	movs	r3, #0
 80004ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004d0:	2300      	movs	r3, #0
 80004d2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	4619      	mov	r1, r3
 80004d8:	480b      	ldr	r0, [pc, #44]	; (8000508 <MX_GPIO_Init+0xc8>)
 80004da:	f000 fe00 	bl	80010de <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80004de:	f7ff fe73 	bl	80001c8 <__NVIC_GetPriorityGrouping>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2200      	movs	r2, #0
 80004e6:	2100      	movs	r1, #0
 80004e8:	4618      	mov	r0, r3
 80004ea:	f7ff fec3 	bl	8000274 <NVIC_EncodePriority>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4619      	mov	r1, r3
 80004f2:	2009      	movs	r0, #9
 80004f4:	f7ff fe94 	bl	8000220 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 80004f8:	2009      	movs	r0, #9
 80004fa:	f7ff fe73 	bl	80001e4 <__NVIC_EnableIRQ>

}
 80004fe:	bf00      	nop
 8000500:	3728      	adds	r7, #40	; 0x28
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	48000400 	.word	0x48000400

0800050c <__NVIC_SetPriorityGrouping>:
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f003 0307 	and.w	r3, r3, #7
 800051a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <__NVIC_SetPriorityGrouping+0x44>)
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000522:	68ba      	ldr	r2, [r7, #8]
 8000524:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000528:	4013      	ands	r3, r2
 800052a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800053c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800053e:	4a04      	ldr	r2, [pc, #16]	; (8000550 <__NVIC_SetPriorityGrouping+0x44>)
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	60d3      	str	r3, [r2, #12]
}
 8000544:	bf00      	nop
 8000546:	3714      	adds	r7, #20
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	e000ed00 	.word	0xe000ed00

08000554 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <LL_RCC_HSI_Enable+0x1c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a04      	ldr	r2, [pc, #16]	; (8000570 <LL_RCC_HSI_Enable+0x1c>)
 800055e:	f043 0301 	orr.w	r3, r3, #1
 8000562:	6013      	str	r3, [r2, #0]
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000

08000574 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <LL_RCC_HSI_IsReady+0x20>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f003 0302 	and.w	r3, r3, #2
 8000580:	2b02      	cmp	r3, #2
 8000582:	bf0c      	ite	eq
 8000584:	2301      	moveq	r3, #1
 8000586:	2300      	movne	r3, #0
 8000588:	b2db      	uxtb	r3, r3
}
 800058a:	4618      	mov	r0, r3
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	40021000 	.word	0x40021000

08000598 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80005a0:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	00db      	lsls	r3, r3, #3
 80005ac:	4904      	ldr	r1, [pc, #16]	; (80005c0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80005ae:	4313      	orrs	r3, r2
 80005b0:	600b      	str	r3, [r1, #0]
}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000

080005c4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <LL_RCC_SetSysClkSource+0x24>)
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	f023 0203 	bic.w	r2, r3, #3
 80005d4:	4904      	ldr	r1, [pc, #16]	; (80005e8 <LL_RCC_SetSysClkSource+0x24>)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4313      	orrs	r3, r2
 80005da:	604b      	str	r3, [r1, #4]
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	40021000 	.word	0x40021000

080005ec <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <LL_RCC_GetSysClkSource+0x18>)
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	f003 030c 	and.w	r3, r3, #12
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40021000 	.word	0x40021000

08000608 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <LL_RCC_SetAHBPrescaler+0x24>)
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000618:	4904      	ldr	r1, [pc, #16]	; (800062c <LL_RCC_SetAHBPrescaler+0x24>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4313      	orrs	r3, r2
 800061e:	604b      	str	r3, [r1, #4]
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	40021000 	.word	0x40021000

08000630 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <LL_RCC_SetAPB1Prescaler+0x24>)
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000640:	4904      	ldr	r1, [pc, #16]	; (8000654 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4313      	orrs	r3, r2
 8000646:	604b      	str	r3, [r1, #4]
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	40021000 	.word	0x40021000

08000658 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000668:	4904      	ldr	r1, [pc, #16]	; (800067c <LL_RCC_SetAPB2Prescaler+0x24>)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4313      	orrs	r3, r2
 800066e:	604b      	str	r3, [r1, #4]
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	40021000 	.word	0x40021000

08000680 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800068a:	69da      	ldr	r2, [r3, #28]
 800068c:	4907      	ldr	r1, [pc, #28]	; (80006ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4313      	orrs	r3, r2
 8000692:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <LL_APB1_GRP1_EnableClock+0x2c>)
 8000696:	69da      	ldr	r2, [r3, #28]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4013      	ands	r3, r2
 800069c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800069e:	68fb      	ldr	r3, [r7, #12]
}
 80006a0:	bf00      	nop
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	40021000 	.word	0x40021000

080006b0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80006ba:	699a      	ldr	r2, [r3, #24]
 80006bc:	4907      	ldr	r1, [pc, #28]	; (80006dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80006c6:	699a      	ldr	r2, [r3, #24]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4013      	ands	r3, r2
 80006cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006ce:	68fb      	ldr	r3, [r7, #12]
}
 80006d0:	bf00      	nop
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	40021000 	.word	0x40021000

080006e0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <LL_FLASH_SetLatency+0x24>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f023 0207 	bic.w	r2, r3, #7
 80006f0:	4904      	ldr	r1, [pc, #16]	; (8000704 <LL_FLASH_SetLatency+0x24>)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4313      	orrs	r3, r2
 80006f6:	600b      	str	r3, [r1, #0]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	40022000 	.word	0x40022000

08000708 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800070c:	4b04      	ldr	r3, [pc, #16]	; (8000720 <LL_FLASH_GetLatency+0x18>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f003 0307 	and.w	r3, r3, #7
}
 8000714:	4618      	mov	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40022000 	.word	0x40022000

08000724 <LL_GPIO_IsInputPinSet>:
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	691a      	ldr	r2, [r3, #16]
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	4013      	ands	r3, r2
 8000736:	683a      	ldr	r2, [r7, #0]
 8000738:	429a      	cmp	r2, r3
 800073a:	bf0c      	ite	eq
 800073c:	2301      	moveq	r3, #1
 800073e:	2300      	movne	r3, #0
 8000740:	b2db      	uxtb	r3, r3
}
 8000742:	4618      	mov	r0, r3
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <LL_GPIO_SetOutputPin>:
{
 800074e:	b480      	push	{r7}
 8000750:	b083      	sub	sp, #12
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
 8000756:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	683a      	ldr	r2, [r7, #0]
 800075c:	619a      	str	r2, [r3, #24]
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr

0800076a <LL_GPIO_ResetOutputPin>:
{
 800076a:	b480      	push	{r7}
 800076c:	b083      	sub	sp, #12
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
 8000772:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	683a      	ldr	r2, [r7, #0]
 8000778:	629a      	str	r2, [r3, #40]	; 0x28
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
	...

08000788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800078e:	2001      	movs	r0, #1
 8000790:	f7ff ff8e 	bl	80006b0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000794:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000798:	f7ff ff72 	bl	8000680 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800079c:	2003      	movs	r0, #3
 800079e:	f7ff feb5 	bl	800050c <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a2:	f000 f82d 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a6:	f7ff fe4b 	bl	8000440 <MX_GPIO_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Modify the code below so it sets/resets used output pin connected to the LED
	  if(switch_state)
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <main+0x70>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d01c      	beq.n	80007ec <main+0x64>
	  {
		  LL_GPIO_SetOutputPin(GPIOB,LL_GPIO_PIN_3);
 80007b2:	2108      	movs	r1, #8
 80007b4:	4811      	ldr	r0, [pc, #68]	; (80007fc <main+0x74>)
 80007b6:	f7ff ffca 	bl	800074e <LL_GPIO_SetOutputPin>
		  for(uint16_t i=0; i<0xFF00; i++){}
 80007ba:	2300      	movs	r3, #0
 80007bc:	80fb      	strh	r3, [r7, #6]
 80007be:	e002      	b.n	80007c6 <main+0x3e>
 80007c0:	88fb      	ldrh	r3, [r7, #6]
 80007c2:	3301      	adds	r3, #1
 80007c4:	80fb      	strh	r3, [r7, #6]
 80007c6:	88fb      	ldrh	r3, [r7, #6]
 80007c8:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 80007cc:	d3f8      	bcc.n	80007c0 <main+0x38>
		  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 80007ce:	2108      	movs	r1, #8
 80007d0:	480a      	ldr	r0, [pc, #40]	; (80007fc <main+0x74>)
 80007d2:	f7ff ffca 	bl	800076a <LL_GPIO_ResetOutputPin>
		  for(uint16_t i=0; i<0xFF00; i++){}
 80007d6:	2300      	movs	r3, #0
 80007d8:	80bb      	strh	r3, [r7, #4]
 80007da:	e002      	b.n	80007e2 <main+0x5a>
 80007dc:	88bb      	ldrh	r3, [r7, #4]
 80007de:	3301      	adds	r3, #1
 80007e0:	80bb      	strh	r3, [r7, #4]
 80007e2:	88bb      	ldrh	r3, [r7, #4]
 80007e4:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 80007e8:	d3f8      	bcc.n	80007dc <main+0x54>
 80007ea:	e7de      	b.n	80007aa <main+0x22>
	  }
	  else
	  {
		  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 80007ec:	2108      	movs	r1, #8
 80007ee:	4803      	ldr	r0, [pc, #12]	; (80007fc <main+0x74>)
 80007f0:	f7ff ffbb 	bl	800076a <LL_GPIO_ResetOutputPin>
	  if(switch_state)
 80007f4:	e7d9      	b.n	80007aa <main+0x22>
 80007f6:	bf00      	nop
 80007f8:	20000020 	.word	0x20000020
 80007fc:	48000400 	.word	0x48000400

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000804:	2000      	movs	r0, #0
 8000806:	f7ff ff6b 	bl	80006e0 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 800080a:	f7ff ff7d 	bl	8000708 <LL_FLASH_GetLatency>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8000814:	f000 f884 	bl	8000920 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8000818:	f7ff fe9c 	bl	8000554 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800081c:	bf00      	nop
 800081e:	f7ff fea9 	bl	8000574 <LL_RCC_HSI_IsReady>
 8000822:	4603      	mov	r3, r0
 8000824:	2b01      	cmp	r3, #1
 8000826:	d1fa      	bne.n	800081e <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000828:	2010      	movs	r0, #16
 800082a:	f7ff feb5 	bl	8000598 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800082e:	2000      	movs	r0, #0
 8000830:	f7ff feea 	bl	8000608 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff fefb 	bl	8000630 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 800083a:	2000      	movs	r0, #0
 800083c:	f7ff ff0c 	bl	8000658 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000840:	2000      	movs	r0, #0
 8000842:	f7ff febf 	bl	80005c4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000846:	bf00      	nop
 8000848:	f7ff fed0 	bl	80005ec <LL_RCC_GetSysClkSource>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d1fa      	bne.n	8000848 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 8000852:	4804      	ldr	r0, [pc, #16]	; (8000864 <SystemClock_Config+0x64>)
 8000854:	f000 fcce 	bl	80011f4 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8000858:	4802      	ldr	r0, [pc, #8]	; (8000864 <SystemClock_Config+0x64>)
 800085a:	f000 fcd9 	bl	8001210 <LL_SetSystemCoreClock>
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	007a1200 	.word	0x007a1200

08000868 <checkButtonState>:

/* USER CODE BEGIN 4 */
uint8_t checkButtonState(GPIO_TypeDef* PORT, uint8_t PIN, uint8_t edge, uint8_t samples_window, uint8_t samples_required)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	4608      	mov	r0, r1
 8000872:	4611      	mov	r1, r2
 8000874:	461a      	mov	r2, r3
 8000876:	4603      	mov	r3, r0
 8000878:	70fb      	strb	r3, [r7, #3]
 800087a:	460b      	mov	r3, r1
 800087c:	70bb      	strb	r3, [r7, #2]
 800087e:	4613      	mov	r3, r2
 8000880:	707b      	strb	r3, [r7, #1]
	  //type your code for "checkButtonState" implementation here:

	uint8_t button_state = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	75fb      	strb	r3, [r7, #23]

	if(edge == 0)
 8000886:	78bb      	ldrb	r3, [r7, #2]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d120      	bne.n	80008ce <checkButtonState+0x66>
	{
		//zistit "samples_window" krat za sebou ci je iny stav od "edge" ak "samples_required" krat je opacny stav, tak retunuj 1 inak 0;

		for(int i=0; i<samples_window ;i++)
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	e010      	b.n	80008b4 <checkButtonState+0x4c>
		{
			if(LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_3))
 8000892:	2108      	movs	r1, #8
 8000894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000898:	f7ff ff44 	bl	8000724 <LL_GPIO_IsInputPinSet>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d003      	beq.n	80008aa <checkButtonState+0x42>
			{
				button_state++;
 80008a2:	7dfb      	ldrb	r3, [r7, #23]
 80008a4:	3301      	adds	r3, #1
 80008a6:	75fb      	strb	r3, [r7, #23]
 80008a8:	e001      	b.n	80008ae <checkButtonState+0x46>
			}
			else
			{
				button_state=0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<samples_window ;i++)
 80008ae:	693b      	ldr	r3, [r7, #16]
 80008b0:	3301      	adds	r3, #1
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	787b      	ldrb	r3, [r7, #1]
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	dbea      	blt.n	8000892 <checkButtonState+0x2a>
			}

		}

		if(button_state>=samples_required)
 80008bc:	7dfa      	ldrb	r2, [r7, #23]
 80008be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d301      	bcc.n	80008ca <checkButtonState+0x62>
		{
			return 1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e026      	b.n	8000918 <checkButtonState+0xb0>
		}
		else
		{
			return 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	e024      	b.n	8000918 <checkButtonState+0xb0>
		}


	}
	else if(edge == 1)
 80008ce:	78bb      	ldrb	r3, [r7, #2]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d120      	bne.n	8000916 <checkButtonState+0xae>
	{

		for(int i=0;i<samples_window;i++)
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	e010      	b.n	80008fc <checkButtonState+0x94>
		{
			if(!LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_3))
 80008da:	2108      	movs	r1, #8
 80008dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e0:	f7ff ff20 	bl	8000724 <LL_GPIO_IsInputPinSet>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d103      	bne.n	80008f2 <checkButtonState+0x8a>
			{
				button_state++;
 80008ea:	7dfb      	ldrb	r3, [r7, #23]
 80008ec:	3301      	adds	r3, #1
 80008ee:	75fb      	strb	r3, [r7, #23]
 80008f0:	e001      	b.n	80008f6 <checkButtonState+0x8e>
			}
			else
			{
				button_state=0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	75fb      	strb	r3, [r7, #23]
		for(int i=0;i<samples_window;i++)
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	3301      	adds	r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	787b      	ldrb	r3, [r7, #1]
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	429a      	cmp	r2, r3
 8000902:	dbea      	blt.n	80008da <checkButtonState+0x72>
			}

		}

		if(button_state>=samples_required)
 8000904:	7dfa      	ldrb	r2, [r7, #23]
 8000906:	f897 3020 	ldrb.w	r3, [r7, #32]
 800090a:	429a      	cmp	r2, r3
 800090c:	d301      	bcc.n	8000912 <checkButtonState+0xaa>
		{
			return 1;
 800090e:	2301      	movs	r3, #1
 8000910:	e002      	b.n	8000918 <checkButtonState+0xb0>
		}
		else
		{
			return 0;
 8000912:	2300      	movs	r3, #0
 8000914:	e000      	b.n	8000918 <checkButtonState+0xb0>
		}


	}

	return 0;
 8000916:	2300      	movs	r3, #0
}
 8000918:	4618      	mov	r0, r3
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
	...

08000930 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800093a:	695a      	ldr	r2, [r3, #20]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4013      	ands	r3, r2
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	429a      	cmp	r2, r3
 8000944:	bf0c      	ite	eq
 8000946:	2301      	moveq	r3, #1
 8000948:	2300      	movne	r3, #0
 800094a:	b2db      	uxtb	r3, r3
}
 800094c:	4618      	mov	r0, r3
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	40010400 	.word	0x40010400

0800095c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8000964:	4a04      	ldr	r2, [pc, #16]	; (8000978 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6153      	str	r3, [r2, #20]
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40010400 	.word	0x40010400

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <HardFault_Handler+0x4>

08000990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <MemManage_Handler+0x4>

08000996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
	...

080009dc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 80009e2:	2008      	movs	r0, #8
 80009e4:	f7ff ffa4 	bl	8000930 <LL_EXTI_IsActiveFlag_0_31>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d015      	beq.n	8000a1a <EXTI3_IRQHandler+0x3e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 80009ee:	2008      	movs	r0, #8
 80009f0:	f7ff ffb4 	bl	800095c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_3 */
	if(checkButtonState(GPIOA,
 80009f4:	235a      	movs	r3, #90	; 0x5a
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	2364      	movs	r3, #100	; 0x64
 80009fa:	2200      	movs	r2, #0
 80009fc:	2108      	movs	r1, #8
 80009fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a02:	f7ff ff31 	bl	8000868 <checkButtonState>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d006      	beq.n	8000a1a <EXTI3_IRQHandler+0x3e>
						LL_GPIO_PIN_3,
						0,
						100,
						90))
	{
		switch_state ^= 1;
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <EXTI3_IRQHandler+0x44>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	f083 0301 	eor.w	r3, r3, #1
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4b02      	ldr	r3, [pc, #8]	; (8000a20 <EXTI3_IRQHandler+0x44>)
 8000a18:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_3 */
  }
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000020 	.word	0x20000020

08000a24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <SystemInit+0x28>)
 8000a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2e:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <SystemInit+0x28>)
 8000a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <SystemInit+0x28>)
 8000a3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a3e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a88 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a54:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a56:	e003      	b.n	8000a60 <LoopCopyDataInit>

08000a58 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a5a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a5c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a5e:	3104      	adds	r1, #4

08000a60 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a60:	480b      	ldr	r0, [pc, #44]	; (8000a90 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a64:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a66:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a68:	d3f6      	bcc.n	8000a58 <CopyDataInit>
	ldr	r2, =_sbss
 8000a6a:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a6c:	e002      	b.n	8000a74 <LoopFillZerobss>

08000a6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a6e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a70:	f842 3b04 	str.w	r3, [r2], #4

08000a74 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <LoopForever+0x16>)
	cmp	r2, r3
 8000a76:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a78:	d3f9      	bcc.n	8000a6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a7a:	f7ff ffd3 	bl	8000a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a7e:	f000 fbd7 	bl	8001230 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a82:	f7ff fe81 	bl	8000788 <main>

08000a86 <LoopForever>:

LoopForever:
    b LoopForever
 8000a86:	e7fe      	b.n	8000a86 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a88:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000a8c:	08001298 	.word	0x08001298
	ldr	r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a94:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8000a98:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8000a9c:	20000024 	.word	0x20000024

08000aa0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <ADC1_2_IRQHandler>
	...

08000aa4 <LL_EXTI_EnableIT_0_31>:
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <LL_EXTI_EnableIT_0_31+0x20>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4904      	ldr	r1, [pc, #16]	; (8000ac4 <LL_EXTI_EnableIT_0_31+0x20>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	600b      	str	r3, [r1, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	40010400 	.word	0x40010400

08000ac8 <LL_EXTI_EnableIT_32_63>:
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <LL_EXTI_EnableIT_32_63+0x20>)
 8000ad2:	6a1a      	ldr	r2, [r3, #32]
 8000ad4:	4904      	ldr	r1, [pc, #16]	; (8000ae8 <LL_EXTI_EnableIT_32_63+0x20>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	620b      	str	r3, [r1, #32]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	40010400 	.word	0x40010400

08000aec <LL_EXTI_DisableIT_0_31>:
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <LL_EXTI_DisableIT_0_31+0x24>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	43db      	mvns	r3, r3
 8000afc:	4904      	ldr	r1, [pc, #16]	; (8000b10 <LL_EXTI_DisableIT_0_31+0x24>)
 8000afe:	4013      	ands	r3, r2
 8000b00:	600b      	str	r3, [r1, #0]
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40010400 	.word	0x40010400

08000b14 <LL_EXTI_DisableIT_32_63>:
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <LL_EXTI_DisableIT_32_63+0x24>)
 8000b1e:	6a1a      	ldr	r2, [r3, #32]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	43db      	mvns	r3, r3
 8000b24:	4904      	ldr	r1, [pc, #16]	; (8000b38 <LL_EXTI_DisableIT_32_63+0x24>)
 8000b26:	4013      	ands	r3, r2
 8000b28:	620b      	str	r3, [r1, #32]
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	40010400 	.word	0x40010400

08000b3c <LL_EXTI_EnableEvent_0_31>:
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <LL_EXTI_EnableEvent_0_31+0x20>)
 8000b46:	685a      	ldr	r2, [r3, #4]
 8000b48:	4904      	ldr	r1, [pc, #16]	; (8000b5c <LL_EXTI_EnableEvent_0_31+0x20>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	604b      	str	r3, [r1, #4]
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	40010400 	.word	0x40010400

08000b60 <LL_EXTI_EnableEvent_32_63>:
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000b6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b6c:	4904      	ldr	r1, [pc, #16]	; (8000b80 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	40010400 	.word	0x40010400

08000b84 <LL_EXTI_DisableEvent_0_31>:
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000b8e:	685a      	ldr	r2, [r3, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	43db      	mvns	r3, r3
 8000b94:	4904      	ldr	r1, [pc, #16]	; (8000ba8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000b96:	4013      	ands	r3, r2
 8000b98:	604b      	str	r3, [r1, #4]
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40010400 	.word	0x40010400

08000bac <LL_EXTI_DisableEvent_32_63>:
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000bb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	4904      	ldr	r1, [pc, #16]	; (8000bd0 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40010400 	.word	0x40010400

08000bd4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000bde:	689a      	ldr	r2, [r3, #8]
 8000be0:	4904      	ldr	r1, [pc, #16]	; (8000bf4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	608b      	str	r3, [r1, #8]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	40010400 	.word	0x40010400

08000bf8 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000c02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c04:	4904      	ldr	r1, [pc, #16]	; (8000c18 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	40010400 	.word	0x40010400

08000c1c <LL_EXTI_DisableRisingTrig_0_31>:
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000c26:	689a      	ldr	r2, [r3, #8]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	4904      	ldr	r1, [pc, #16]	; (8000c40 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000c2e:	4013      	ands	r3, r2
 8000c30:	608b      	str	r3, [r1, #8]
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40010400 	.word	0x40010400

08000c44 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000c4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	43db      	mvns	r3, r3
 8000c54:	4904      	ldr	r1, [pc, #16]	; (8000c68 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000c56:	4013      	ands	r3, r2
 8000c58:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40010400 	.word	0x40010400

08000c6c <LL_EXTI_EnableFallingTrig_0_31>:
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000c76:	68da      	ldr	r2, [r3, #12]
 8000c78:	4904      	ldr	r1, [pc, #16]	; (8000c8c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	60cb      	str	r3, [r1, #12]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	40010400 	.word	0x40010400

08000c90 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c9c:	4904      	ldr	r1, [pc, #16]	; (8000cb0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	40010400 	.word	0x40010400

08000cb4 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000cbe:	68da      	ldr	r2, [r3, #12]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	4904      	ldr	r1, [pc, #16]	; (8000cd8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	60cb      	str	r3, [r1, #12]
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40010400 	.word	0x40010400

08000cdc <LL_EXTI_DisableFallingTrig_32_63>:
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	43db      	mvns	r3, r3
 8000cec:	4904      	ldr	r1, [pc, #16]	; (8000d00 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000cee:	4013      	ands	r3, r2
 8000cf0:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40010400 	.word	0x40010400

08000d04 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	7a1b      	ldrb	r3, [r3, #8]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	f000 80c2 	beq.w	8000e9e <LL_EXTI_Init+0x19a>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d05b      	beq.n	8000dda <LL_EXTI_Init+0xd6>
    {
      switch (EXTI_InitStruct->Mode)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	7a5b      	ldrb	r3, [r3, #9]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d00e      	beq.n	8000d48 <LL_EXTI_Init+0x44>
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d017      	beq.n	8000d5e <LL_EXTI_Init+0x5a>
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d120      	bne.n	8000d74 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff ff24 	bl	8000b84 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff feaf 	bl	8000aa4 <LL_EXTI_EnableIT_0_31>
          break;
 8000d46:	e018      	b.n	8000d7a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fecd 	bl	8000aec <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fef0 	bl	8000b3c <LL_EXTI_EnableEvent_0_31>
          break;
 8000d5c:	e00d      	b.n	8000d7a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fe9e 	bl	8000aa4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fee5 	bl	8000b3c <LL_EXTI_EnableEvent_0_31>
          break;
 8000d72:	e002      	b.n	8000d7a <LL_EXTI_Init+0x76>
        default:
          status = ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	73fb      	strb	r3, [r7, #15]
          break;
 8000d78:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	7a9b      	ldrb	r3, [r3, #10]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d02b      	beq.n	8000dda <LL_EXTI_Init+0xd6>
      {
        switch (EXTI_InitStruct->Trigger)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	7a9b      	ldrb	r3, [r3, #10]
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d00e      	beq.n	8000da8 <LL_EXTI_Init+0xa4>
 8000d8a:	2b03      	cmp	r3, #3
 8000d8c:	d017      	beq.n	8000dbe <LL_EXTI_Init+0xba>
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d120      	bne.n	8000dd4 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ff8c 	bl	8000cb4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff17 	bl	8000bd4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000da6:	e019      	b.n	8000ddc <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff35 	bl	8000c1c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff58 	bl	8000c6c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000dbc:	e00e      	b.n	8000ddc <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ff06 	bl	8000bd4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff4d 	bl	8000c6c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000dd2:	e003      	b.n	8000ddc <LL_EXTI_Init+0xd8>
          default:
            status = ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	73fb      	strb	r3, [r7, #15]
            break;
 8000dd8:	e000      	b.n	8000ddc <LL_EXTI_Init+0xd8>
        }
      }
 8000dda:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d071      	beq.n	8000ec8 <LL_EXTI_Init+0x1c4>
    {
      switch (EXTI_InitStruct->Mode)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	7a5b      	ldrb	r3, [r3, #9]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d00e      	beq.n	8000e0a <LL_EXTI_Init+0x106>
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d017      	beq.n	8000e20 <LL_EXTI_Init+0x11c>
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d120      	bne.n	8000e36 <LL_EXTI_Init+0x132>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fed7 	bl	8000bac <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fe60 	bl	8000ac8 <LL_EXTI_EnableIT_32_63>
          break;
 8000e08:	e018      	b.n	8000e3c <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fe80 	bl	8000b14 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fea1 	bl	8000b60 <LL_EXTI_EnableEvent_32_63>
          break;
 8000e1e:	e00d      	b.n	8000e3c <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fe4f 	bl	8000ac8 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fe96 	bl	8000b60 <LL_EXTI_EnableEvent_32_63>
          break;
 8000e34:	e002      	b.n	8000e3c <LL_EXTI_Init+0x138>
        default:
          status = ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	73fb      	strb	r3, [r7, #15]
          break;
 8000e3a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	7a9b      	ldrb	r3, [r3, #10]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d041      	beq.n	8000ec8 <LL_EXTI_Init+0x1c4>
      {
        switch (EXTI_InitStruct->Trigger)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	7a9b      	ldrb	r3, [r3, #10]
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d00e      	beq.n	8000e6a <LL_EXTI_Init+0x166>
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	d017      	beq.n	8000e80 <LL_EXTI_Init+0x17c>
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d120      	bne.n	8000e96 <LL_EXTI_Init+0x192>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff3f 	bl	8000cdc <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fec8 	bl	8000bf8 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8000e68:	e02f      	b.n	8000eca <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fee8 	bl	8000c44 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff09 	bl	8000c90 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8000e7e:	e024      	b.n	8000eca <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff feb7 	bl	8000bf8 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fefe 	bl	8000c90 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8000e94:	e019      	b.n	8000eca <LL_EXTI_Init+0x1c6>
          default:
            status = ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	73fb      	strb	r3, [r7, #15]
            break;
 8000e9a:	bf00      	nop
 8000e9c:	e015      	b.n	8000eca <LL_EXTI_Init+0x1c6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fe22 	bl	8000aec <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fe69 	bl	8000b84 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fe2c 	bl	8000b14 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fe73 	bl	8000bac <LL_EXTI_DisableEvent_32_63>
 8000ec6:	e000      	b.n	8000eca <LL_EXTI_Init+0x1c6>
      }
 8000ec8:	bf00      	nop
#endif
  }
  return status;
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <LL_GPIO_SetPinMode>:
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	fa93 f3a3 	rbit	r3, r3
 8000eee:	613b      	str	r3, [r7, #16]
  return result;
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	fab3 f383 	clz	r3, r3
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2103      	movs	r1, #3
 8000efc:	fa01 f303 	lsl.w	r3, r1, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	401a      	ands	r2, r3
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	fa93 f3a3 	rbit	r3, r3
 8000f0e:	61bb      	str	r3, [r7, #24]
  return result;
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	fab3 f383 	clz	r3, r3
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f20:	431a      	orrs	r2, r3
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	601a      	str	r2, [r3, #0]
}
 8000f26:	bf00      	nop
 8000f28:	3724      	adds	r7, #36	; 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <LL_GPIO_SetPinOutputType>:
{
 8000f32:	b480      	push	{r7}
 8000f34:	b085      	sub	sp, #20
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	60f8      	str	r0, [r7, #12]
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	401a      	ands	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	fb01 f303 	mul.w	r3, r1, r3
 8000f50:	431a      	orrs	r2, r3
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	605a      	str	r2, [r3, #4]
}
 8000f56:	bf00      	nop
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <LL_GPIO_SetPinSpeed>:
{
 8000f62:	b480      	push	{r7}
 8000f64:	b089      	sub	sp, #36	; 0x24
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	60f8      	str	r0, [r7, #12]
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	fa93 f3a3 	rbit	r3, r3
 8000f7c:	613b      	str	r3, [r7, #16]
  return result;
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	fab3 f383 	clz	r3, r3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	2103      	movs	r1, #3
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	401a      	ands	r2, r3
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa93 f3a3 	rbit	r3, r3
 8000f9c:	61bb      	str	r3, [r7, #24]
  return result;
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	fab3 f383 	clz	r3, r3
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	609a      	str	r2, [r3, #8]
}
 8000fb4:	bf00      	nop
 8000fb6:	3724      	adds	r7, #36	; 0x24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <LL_GPIO_SetPinPull>:
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	; 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	68da      	ldr	r2, [r3, #12]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa93 f3a3 	rbit	r3, r3
 8000fda:	613b      	str	r3, [r7, #16]
  return result;
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	fab3 f383 	clz	r3, r3
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2103      	movs	r1, #3
 8000fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	401a      	ands	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	fa93 f3a3 	rbit	r3, r3
 8000ffa:	61bb      	str	r3, [r7, #24]
  return result;
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	fab3 f383 	clz	r3, r3
 8001002:	b2db      	uxtb	r3, r3
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	fa01 f303 	lsl.w	r3, r1, r3
 800100c:	431a      	orrs	r2, r3
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	60da      	str	r2, [r3, #12]
}
 8001012:	bf00      	nop
 8001014:	3724      	adds	r7, #36	; 0x24
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <LL_GPIO_SetAFPin_0_7>:
{
 800101e:	b480      	push	{r7}
 8001020:	b089      	sub	sp, #36	; 0x24
 8001022:	af00      	add	r7, sp, #0
 8001024:	60f8      	str	r0, [r7, #12]
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6a1a      	ldr	r2, [r3, #32]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	fa93 f3a3 	rbit	r3, r3
 8001038:	613b      	str	r3, [r7, #16]
  return result;
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	fab3 f383 	clz	r3, r3
 8001040:	b2db      	uxtb	r3, r3
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	210f      	movs	r1, #15
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	401a      	ands	r2, r3
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	fa93 f3a3 	rbit	r3, r3
 8001058:	61bb      	str	r3, [r7, #24]
  return result;
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	fab3 f383 	clz	r3, r3
 8001060:	b2db      	uxtb	r3, r3
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	431a      	orrs	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	621a      	str	r2, [r3, #32]
}
 8001070:	bf00      	nop
 8001072:	3724      	adds	r7, #36	; 0x24
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <LL_GPIO_SetAFPin_8_15>:
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	; 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	fa93 f3a3 	rbit	r3, r3
 8001098:	613b      	str	r3, [r7, #16]
  return result;
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	fab3 f383 	clz	r3, r3
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	210f      	movs	r1, #15
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	401a      	ands	r2, r3
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	fa93 f3a3 	rbit	r3, r3
 80010ba:	61bb      	str	r3, [r7, #24]
  return result;
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	fab3 f383 	clz	r3, r3
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	fa01 f303 	lsl.w	r3, r1, r3
 80010cc:	431a      	orrs	r2, r3
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80010d2:	bf00      	nop
 80010d4:	3724      	adds	r7, #36	; 0x24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b088      	sub	sp, #32
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	fa93 f3a3 	rbit	r3, r3
 80010f4:	613b      	str	r3, [r7, #16]
  return result;
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	fab3 f383 	clz	r3, r3
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001100:	e051      	b.n	80011a6 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	2101      	movs	r1, #1
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d043      	beq.n	80011a0 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d003      	beq.n	8001128 <LL_GPIO_Init+0x4a>
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b02      	cmp	r3, #2
 8001126:	d10e      	bne.n	8001146 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	461a      	mov	r2, r3
 800112e:	69b9      	ldr	r1, [r7, #24]
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff16 	bl	8000f62 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	6819      	ldr	r1, [r3, #0]
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	461a      	mov	r2, r3
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff fef6 	bl	8000f32 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	461a      	mov	r2, r3
 800114c:	69b9      	ldr	r1, [r7, #24]
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ff36 	bl	8000fc0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d11a      	bne.n	8001192 <LL_GPIO_Init+0xb4>
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	fa93 f3a3 	rbit	r3, r3
 8001166:	60bb      	str	r3, [r7, #8]
  return result;
 8001168:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800116a:	fab3 f383 	clz	r3, r3
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b07      	cmp	r3, #7
 8001172:	d807      	bhi.n	8001184 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	461a      	mov	r2, r3
 800117a:	69b9      	ldr	r1, [r7, #24]
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff4e 	bl	800101e <LL_GPIO_SetAFPin_0_7>
 8001182:	e006      	b.n	8001192 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	461a      	mov	r2, r3
 800118a:	69b9      	ldr	r1, [r7, #24]
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ff75 	bl	800107c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	461a      	mov	r2, r3
 8001198:	69b9      	ldr	r1, [r7, #24]
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff fe9a 	bl	8000ed4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	3301      	adds	r3, #1
 80011a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa22 f303 	lsr.w	r3, r2, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1a6      	bne.n	8001102 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3720      	adds	r7, #32
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d2:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <LL_InitTick+0x30>)
 80011d4:	3b01      	subs	r3, #1
 80011d6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <LL_InitTick+0x30>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <LL_InitTick+0x30>)
 80011e0:	2205      	movs	r2, #5
 80011e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000e010 	.word	0xe000e010

080011f4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80011fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff ffdd 	bl	80011c0 <LL_InitTick>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001218:	4a04      	ldr	r2, [pc, #16]	; (800122c <LL_SetSystemCoreClock+0x1c>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6013      	str	r3, [r2, #0]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000000 	.word	0x20000000

08001230 <__libc_init_array>:
 8001230:	b570      	push	{r4, r5, r6, lr}
 8001232:	4e0d      	ldr	r6, [pc, #52]	; (8001268 <__libc_init_array+0x38>)
 8001234:	4c0d      	ldr	r4, [pc, #52]	; (800126c <__libc_init_array+0x3c>)
 8001236:	1ba4      	subs	r4, r4, r6
 8001238:	10a4      	asrs	r4, r4, #2
 800123a:	2500      	movs	r5, #0
 800123c:	42a5      	cmp	r5, r4
 800123e:	d109      	bne.n	8001254 <__libc_init_array+0x24>
 8001240:	4e0b      	ldr	r6, [pc, #44]	; (8001270 <__libc_init_array+0x40>)
 8001242:	4c0c      	ldr	r4, [pc, #48]	; (8001274 <__libc_init_array+0x44>)
 8001244:	f000 f818 	bl	8001278 <_init>
 8001248:	1ba4      	subs	r4, r4, r6
 800124a:	10a4      	asrs	r4, r4, #2
 800124c:	2500      	movs	r5, #0
 800124e:	42a5      	cmp	r5, r4
 8001250:	d105      	bne.n	800125e <__libc_init_array+0x2e>
 8001252:	bd70      	pop	{r4, r5, r6, pc}
 8001254:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001258:	4798      	blx	r3
 800125a:	3501      	adds	r5, #1
 800125c:	e7ee      	b.n	800123c <__libc_init_array+0xc>
 800125e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001262:	4798      	blx	r3
 8001264:	3501      	adds	r5, #1
 8001266:	e7f2      	b.n	800124e <__libc_init_array+0x1e>
 8001268:	08001290 	.word	0x08001290
 800126c:	08001290 	.word	0x08001290
 8001270:	08001290 	.word	0x08001290
 8001274:	08001294 	.word	0x08001294

08001278 <_init>:
 8001278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800127a:	bf00      	nop
 800127c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800127e:	bc08      	pop	{r3}
 8001280:	469e      	mov	lr, r3
 8001282:	4770      	bx	lr

08001284 <_fini>:
 8001284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001286:	bf00      	nop
 8001288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800128a:	bc08      	pop	{r3}
 800128c:	469e      	mov	lr, r3
 800128e:	4770      	bx	lr
